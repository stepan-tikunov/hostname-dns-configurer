// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: api/v1/dns.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DnsService_GetNameserverList_FullMethodName = "/api.v1.DnsService/GetNameserverList"
	DnsService_GetNameserverAt_FullMethodName   = "/api.v1.DnsService/GetNameserverAt"
	DnsService_CreateNameserver_FullMethodName  = "/api.v1.DnsService/CreateNameserver"
	DnsService_DeleteNameserver_FullMethodName  = "/api.v1.DnsService/DeleteNameserver"
)

// DnsServiceClient is the client API for DnsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Nameserver configuration service
type DnsServiceClient interface {
	// Get all used nameservers
	GetNameserverList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NameserverList, error)
	// Get nameserver by index
	GetNameserverAt(ctx context.Context, in *GetNameserverRequest, opts ...grpc.CallOption) (*NameserverResponse, error)
	// Create the nameserer
	CreateNameserver(ctx context.Context, in *CreateNameserverRequest, opts ...grpc.CallOption) (*NameserverResponse, error)
	// Delete the nameserver
	DeleteNameserver(ctx context.Context, in *DeleteNameserverRequest, opts ...grpc.CallOption) (*NameserverResponse, error)
}

type dnsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDnsServiceClient(cc grpc.ClientConnInterface) DnsServiceClient {
	return &dnsServiceClient{cc}
}

func (c *dnsServiceClient) GetNameserverList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NameserverList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NameserverList)
	err := c.cc.Invoke(ctx, DnsService_GetNameserverList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) GetNameserverAt(ctx context.Context, in *GetNameserverRequest, opts ...grpc.CallOption) (*NameserverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NameserverResponse)
	err := c.cc.Invoke(ctx, DnsService_GetNameserverAt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) CreateNameserver(ctx context.Context, in *CreateNameserverRequest, opts ...grpc.CallOption) (*NameserverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NameserverResponse)
	err := c.cc.Invoke(ctx, DnsService_CreateNameserver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) DeleteNameserver(ctx context.Context, in *DeleteNameserverRequest, opts ...grpc.CallOption) (*NameserverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NameserverResponse)
	err := c.cc.Invoke(ctx, DnsService_DeleteNameserver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DnsServiceServer is the server API for DnsService service.
// All implementations must embed UnimplementedDnsServiceServer
// for forward compatibility
//
// Nameserver configuration service
type DnsServiceServer interface {
	// Get all used nameservers
	GetNameserverList(context.Context, *emptypb.Empty) (*NameserverList, error)
	// Get nameserver by index
	GetNameserverAt(context.Context, *GetNameserverRequest) (*NameserverResponse, error)
	// Create the nameserer
	CreateNameserver(context.Context, *CreateNameserverRequest) (*NameserverResponse, error)
	// Delete the nameserver
	DeleteNameserver(context.Context, *DeleteNameserverRequest) (*NameserverResponse, error)
	mustEmbedUnimplementedDnsServiceServer()
}

// UnimplementedDnsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDnsServiceServer struct {
}

func (UnimplementedDnsServiceServer) GetNameserverList(context.Context, *emptypb.Empty) (*NameserverList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNameserverList not implemented")
}
func (UnimplementedDnsServiceServer) GetNameserverAt(context.Context, *GetNameserverRequest) (*NameserverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNameserverAt not implemented")
}
func (UnimplementedDnsServiceServer) CreateNameserver(context.Context, *CreateNameserverRequest) (*NameserverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNameserver not implemented")
}
func (UnimplementedDnsServiceServer) DeleteNameserver(context.Context, *DeleteNameserverRequest) (*NameserverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNameserver not implemented")
}
func (UnimplementedDnsServiceServer) mustEmbedUnimplementedDnsServiceServer() {}

// UnsafeDnsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DnsServiceServer will
// result in compilation errors.
type UnsafeDnsServiceServer interface {
	mustEmbedUnimplementedDnsServiceServer()
}

func RegisterDnsServiceServer(s grpc.ServiceRegistrar, srv DnsServiceServer) {
	s.RegisterService(&DnsService_ServiceDesc, srv)
}

func _DnsService_GetNameserverList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).GetNameserverList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_GetNameserverList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).GetNameserverList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_GetNameserverAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNameserverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).GetNameserverAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_GetNameserverAt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).GetNameserverAt(ctx, req.(*GetNameserverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_CreateNameserver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNameserverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).CreateNameserver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_CreateNameserver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).CreateNameserver(ctx, req.(*CreateNameserverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_DeleteNameserver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNameserverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).DeleteNameserver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_DeleteNameserver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).DeleteNameserver(ctx, req.(*DeleteNameserverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DnsService_ServiceDesc is the grpc.ServiceDesc for DnsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DnsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.DnsService",
	HandlerType: (*DnsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNameserverList",
			Handler:    _DnsService_GetNameserverList_Handler,
		},
		{
			MethodName: "GetNameserverAt",
			Handler:    _DnsService_GetNameserverAt_Handler,
		},
		{
			MethodName: "CreateNameserver",
			Handler:    _DnsService_CreateNameserver_Handler,
		},
		{
			MethodName: "DeleteNameserver",
			Handler:    _DnsService_DeleteNameserver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/dns.proto",
}
