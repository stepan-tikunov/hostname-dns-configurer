// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: api/v1/dns.proto

package apiv1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NameserverList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all "nameserver" options in resolv.conf file.
	Servers []*Nameserver `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
	// The checksum of all meaningful fields in resolv.conf file.
	// Must be used to prevent cases when client operates on outdated data.
	Checksum uint32 `protobuf:"varint,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (x *NameserverList) Reset() {
	*x = NameserverList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_dns_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameserverList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameserverList) ProtoMessage() {}

func (x *NameserverList) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_dns_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameserverList.ProtoReflect.Descriptor instead.
func (*NameserverList) Descriptor() ([]byte, []int) {
	return file_api_v1_dns_proto_rawDescGZIP(), []int{0}
}

func (x *NameserverList) GetServers() []*Nameserver {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *NameserverList) GetChecksum() uint32 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

type Nameserver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Internet address of the name server, either IPv4 or IPv6.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Nameserver) Reset() {
	*x = Nameserver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_dns_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nameserver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nameserver) ProtoMessage() {}

func (x *Nameserver) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_dns_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nameserver.ProtoReflect.Descriptor instead.
func (*Nameserver) Descriptor() ([]byte, []int) {
	return file_api_v1_dns_proto_rawDescGZIP(), []int{1}
}

func (x *Nameserver) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Nameserver) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type NameserverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested nameserver
	Server *Nameserver `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	// The checksum of all meaningful fields in resolv.conf file.
	// Must be used to prevent cases when client operates on outdated data.
	Checksum uint32 `protobuf:"varint,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (x *NameserverResponse) Reset() {
	*x = NameserverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_dns_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameserverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameserverResponse) ProtoMessage() {}

func (x *NameserverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_dns_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameserverResponse.ProtoReflect.Descriptor instead.
func (*NameserverResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_dns_proto_rawDescGZIP(), []int{2}
}

func (x *NameserverResponse) GetServer() *Nameserver {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *NameserverResponse) GetChecksum() uint32 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

type GetNameserverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of the nameserver (can be received from GetNameserverList()).
	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *GetNameserverRequest) Reset() {
	*x = GetNameserverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_dns_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNameserverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNameserverRequest) ProtoMessage() {}

func (x *GetNameserverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_dns_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNameserverRequest.ProtoReflect.Descriptor instead.
func (*GetNameserverRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_dns_proto_rawDescGZIP(), []int{3}
}

func (x *GetNameserverRequest) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type CreateNameserverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of the nameserver (can be received from GetNameserverList()).
	// If set, inserts nameserver at specified index.
	// Otherwise, puts nameserver after the last one.
	Index *int32 `protobuf:"varint,1,opt,name=index,proto3,oneof" json:"index,omitempty"`
	// Internet address of the name server, either IPv4 or IPv6.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// The last received checksum from GetNameserverList().
	// Required if Index field is set.
	Checksum *uint32 `protobuf:"varint,3,opt,name=checksum,proto3,oneof" json:"checksum,omitempty"`
}

func (x *CreateNameserverRequest) Reset() {
	*x = CreateNameserverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_dns_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNameserverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNameserverRequest) ProtoMessage() {}

func (x *CreateNameserverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_dns_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNameserverRequest.ProtoReflect.Descriptor instead.
func (*CreateNameserverRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_dns_proto_rawDescGZIP(), []int{4}
}

func (x *CreateNameserverRequest) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *CreateNameserverRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateNameserverRequest) GetChecksum() uint32 {
	if x != nil && x.Checksum != nil {
		return *x.Checksum
	}
	return 0
}

type DeleteNameserverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of the nameserver to delete (can be received from GetNameserverList()).
	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The last received checksum from GetNameserverList().
	Checksum uint32 `protobuf:"varint,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (x *DeleteNameserverRequest) Reset() {
	*x = DeleteNameserverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_dns_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNameserverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNameserverRequest) ProtoMessage() {}

func (x *DeleteNameserverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_dns_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNameserverRequest.ProtoReflect.Descriptor instead.
func (*DeleteNameserverRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_dns_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteNameserverRequest) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *DeleteNameserverRequest) GetChecksum() uint32 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

var File_api_v1_dns_proto protoreflect.FileDescriptor

var file_api_v1_dns_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x0e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x22, 0x3c, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x5c, 0x0a, 0x12, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0x2c, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x86, 0x01, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x08,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01,
	0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x22, 0x4b, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x32, 0x9b, 0x03, 0x0a, 0x0a, 0x44, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x55, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x64, 0x6e, 0x73, 0x12, 0x65, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x74, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x7d, 0x12, 0x64,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x3a, 0x01, 0x2a, 0x22, 0x08, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x64, 0x6e, 0x73, 0x12, 0x69, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x2a, 0x10, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x7d, 0x42,
	0x93, 0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x42, 0x08,
	0x44, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x65, 0x70, 0x61, 0x6e, 0x2d, 0x74, 0x69,
	0x6b, 0x75, 0x6e, 0x6f, 0x76, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x64,
	0x6e, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x72, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x70, 0x69, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x06, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x06,
	0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x12, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x07, 0x41, 0x70,
	0x69, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_dns_proto_rawDescOnce sync.Once
	file_api_v1_dns_proto_rawDescData = file_api_v1_dns_proto_rawDesc
)

func file_api_v1_dns_proto_rawDescGZIP() []byte {
	file_api_v1_dns_proto_rawDescOnce.Do(func() {
		file_api_v1_dns_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_dns_proto_rawDescData)
	})
	return file_api_v1_dns_proto_rawDescData
}

var file_api_v1_dns_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_api_v1_dns_proto_goTypes = []any{
	(*NameserverList)(nil),          // 0: api.v1.NameserverList
	(*Nameserver)(nil),              // 1: api.v1.Nameserver
	(*NameserverResponse)(nil),      // 2: api.v1.NameserverResponse
	(*GetNameserverRequest)(nil),    // 3: api.v1.GetNameserverRequest
	(*CreateNameserverRequest)(nil), // 4: api.v1.CreateNameserverRequest
	(*DeleteNameserverRequest)(nil), // 5: api.v1.DeleteNameserverRequest
	(*emptypb.Empty)(nil),           // 6: google.protobuf.Empty
}
var file_api_v1_dns_proto_depIdxs = []int32{
	1, // 0: api.v1.NameserverList.servers:type_name -> api.v1.Nameserver
	1, // 1: api.v1.NameserverResponse.server:type_name -> api.v1.Nameserver
	6, // 2: api.v1.DnsService.GetNameserverList:input_type -> google.protobuf.Empty
	3, // 3: api.v1.DnsService.GetNameserverAt:input_type -> api.v1.GetNameserverRequest
	4, // 4: api.v1.DnsService.CreateNameserver:input_type -> api.v1.CreateNameserverRequest
	5, // 5: api.v1.DnsService.DeleteNameserver:input_type -> api.v1.DeleteNameserverRequest
	0, // 6: api.v1.DnsService.GetNameserverList:output_type -> api.v1.NameserverList
	2, // 7: api.v1.DnsService.GetNameserverAt:output_type -> api.v1.NameserverResponse
	2, // 8: api.v1.DnsService.CreateNameserver:output_type -> api.v1.NameserverResponse
	2, // 9: api.v1.DnsService.DeleteNameserver:output_type -> api.v1.NameserverResponse
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_api_v1_dns_proto_init() }
func file_api_v1_dns_proto_init() {
	if File_api_v1_dns_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1_dns_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*NameserverList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_dns_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Nameserver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_dns_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*NameserverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_dns_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetNameserverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_dns_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CreateNameserverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_dns_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteNameserverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v1_dns_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_dns_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_dns_proto_goTypes,
		DependencyIndexes: file_api_v1_dns_proto_depIdxs,
		MessageInfos:      file_api_v1_dns_proto_msgTypes,
	}.Build()
	File_api_v1_dns_proto = out.File
	file_api_v1_dns_proto_rawDesc = nil
	file_api_v1_dns_proto_goTypes = nil
	file_api_v1_dns_proto_depIdxs = nil
}
